name: Release

on: push

jobs:

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: hadolint/hadolint-action@v1.5.0
        with:
          dockerfile: Dockerfile
      - uses: actions/setup-go@v1
        with:
          go-version: '1.16'
      - name: go-test
        run: make test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }} ##<--Secrets
          password: ${{ secrets.DOCKER_PASSWORD }} ##<--Secrets
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: kottmar/app1:${{ env.RELEASE_VERSION }} ##<-- Your Docker image
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      # - name: Run Trivy vulnerability scanner
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     image-ref: kottmar/app1:${{ env.RELEASE_VERSION }} ##<-- Your Docker image
      #     exit-code: '1'
      #     ignore-unfixed: true
      #     vuln-type: 'os,library'
      #     severity: 'CRITICAL,HIGH'
      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  deploy-chart:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    steps:
      - name: Set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Setup SSH Keys and known_hosts
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.CHART_REPO_PRIVATE_KEY }}" 
      - uses: actions/setup-go@v1
        with:
          go-version: '1.16'
      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.5.4
      - name: Install jq
        run: sudo apt-get install jq
      - name: Bump chart
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          ## <-- change line 92 to your marketplace use your ssh link not htttps!, replace every "rancher-demo" with your application name in the market charts/<YOUR-APPLICATION>/
        run: |
          export PATH=${PATH}:`go env GOPATH`/bin
          go get github.com/davidrjonas/semver-cli
          git clone git@github.com:OoioO/MARKET.git
          cd MARKET
          sed -i "s/appVersion:.*/appVersion: ${{ env.RELEASE_VERSION }}/g" charts/application/Chart.yaml
          current_chart_version=$(cat charts/application/Chart.yaml | grep "^version: .*" | grep -o "[0-9.]\+")
          next_chart_version=$(semver-cli inc minor $current_chart_version)
          echo "CHART_VERSION=${next_chart_version}" >> $GITHUB_ENV
          echo "Current chart version: $current_chart_version"
          echo "Next chart version: $next_chart_version"
          sed -i "s/version:.*/version: $next_chart_version/g" charts/application/Chart.yaml
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "bump application to ${{ env.RELEASE_VERSION }}"
          git push
      - uses: ifaxity/wait-on-action@v1
        name: wait for helm release
        with:
          resource: https://github.com/OoioO/MARKET/releases/download/application-${{ env.CHART_VERSION }}/application-${{ env.CHART_VERSION }}.tgz
          interval: 10s
          ## till here
